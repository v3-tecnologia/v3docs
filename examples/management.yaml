basePath: /
definitions:
  httpserver.AssignToTeamDTO:
    properties:
      team_id:
        type: integer
    required:
    - team_id
    type: object
  httpserver.CreateAccountDTO:
    properties:
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - correlation_id
    - name
    type: object
  httpserver.CreateDeviceDTO:
    properties:
      automatic_recognition:
        type: boolean
      certificate_id:
        maxLength: 50
        minLength: 3
        type: string
      fleet_id:
        type: integer
      iccid:
        maxLength: 20
        minLength: 19
        type: string
      imei:
        maxLength: 15
        minLength: 15
        type: string
      model:
        maxLength: 50
        minLength: 3
        type: string
      phone_number:
        maxLength: 15
        minLength: 10
        type: string
    required:
    - certificate_id
    - fleet_id
    - iccid
    - imei
    - model
    - phone_number
    type: object
  httpserver.CreateDriverDTO:
    properties:
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - correlation_id
    - name
    type: object
  httpserver.CreateFleetDTO:
    properties:
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      team_id:
        type: integer
    required:
    - correlation_id
    - name
    - team_id
    type: object
  httpserver.CreateTeamDTO:
    properties:
      account_id:
        type: integer
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - account_id
    - correlation_id
    - name
    type: object
  httpserver.UpdateAccountDTO:
    properties:
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - correlation_id
    - name
    type: object
  httpserver.UpdateDeviceDTO:
    properties:
      automatic_recognition:
        type: boolean
      certificate_id:
        maxLength: 50
        minLength: 3
        type: string
      fleet_id:
        type: integer
      iccid:
        maxLength: 20
        minLength: 19
        type: string
      imei:
        maxLength: 15
        minLength: 15
        type: string
      model:
        maxLength: 50
        minLength: 3
        type: string
      phone_number:
        maxLength: 15
        minLength: 10
        type: string
    required:
    - certificate_id
    - fleet_id
    - iccid
    - imei
    - model
    - phone_number
    type: object
  httpserver.UpdateDriverDTO:
    properties:
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - correlation_id
    - name
    type: object
  httpserver.UpdateFleetDTO:
    properties:
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      team_id:
        type: integer
    required:
    - correlation_id
    - name
    - team_id
    type: object
  httpserver.UpdateTeamDTO:
    properties:
      account_id:
        type: integer
      correlation_id:
        maxLength: 50
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - account_id
    - correlation_id
    - name
    type: object
  model.Account:
    properties:
      client_id:
        type: string
      correlation_id:
        type: string
      created_at:
        $ref: '#/definitions/types.CustomTime'
      deleted_at:
        $ref: '#/definitions/types.CustomTime'
      id:
        type: integer
      name:
        type: string
      tenant_id:
        type: string
      ulid:
        type: string
      updated_at:
        $ref: '#/definitions/types.CustomTime'
    type: object
  model.Device:
    properties:
      automatic_recognition:
        type: boolean
      certificate_id:
        type: string
      created_at:
        $ref: '#/definitions/types.CustomTime'
      deleted_at:
        $ref: '#/definitions/types.CustomTime'
      fleet_id:
        type: integer
      iccid:
        type: string
      id:
        type: integer
      imei:
        type: string
      model:
        type: string
      phone_number:
        type: string
      ulid:
        type: string
      updated_at:
        $ref: '#/definitions/types.CustomTime'
    type: object
  model.Driver:
    properties:
      correlation_id:
        type: string
      created_at:
        $ref: '#/definitions/types.CustomTime'
      deleted_at:
        $ref: '#/definitions/types.CustomTime'
      id:
        type: integer
      name:
        type: string
      ulid:
        type: string
      updated_at:
        $ref: '#/definitions/types.CustomTime'
    type: object
  model.Fleet:
    properties:
      correlation_id:
        type: string
      created_at:
        $ref: '#/definitions/types.CustomTime'
      deleted_at:
        $ref: '#/definitions/types.CustomTime'
      id:
        type: integer
      name:
        type: string
      team_id:
        type: integer
      ulid:
        type: string
      updated_at:
        $ref: '#/definitions/types.CustomTime'
    type: object
  model.Team:
    properties:
      account_id:
        type: integer
      correlation_id:
        type: string
      created_at:
        $ref: '#/definitions/types.CustomTime'
      deleted_at:
        $ref: '#/definitions/types.CustomTime'
      id:
        type: integer
      name:
        type: string
      ulid:
        type: string
      updated_at:
        $ref: '#/definitions/types.CustomTime'
    type: object
  service.PaginatedAccounts:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Account'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  service.PaginatedDevices:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Device'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  service.PaginatedDrivers:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Driver'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  service.PaginatedFleets:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Fleet'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  service.PaginatedTeams:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Team'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  types.CustomTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: v3sandbox.com
info:
  contact: {}
  description: Aplicação em GO responsável por realizar o CRUD das estruturas base.
  title: Management API
  version: 0.0.1
paths:
  /device:
    post:
      consumes:
      - application/json
      description: |-
        Create handles HTTP POST requests to create a new device.
        It validates the request body against CreateDeviceDTO schema,
        rocesses the device creation through deviceService,
        and returns the created device.
      parameters:
      - description: Device Data
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/httpserver.CreateDeviceDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Device'
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Create a new device
      tags:
      - Device
  /device/{id}:
    delete:
      description: |-
        Delete handles HTTP DELETE requests to remove a device by its ID.
        It parses the device ID from the request parameters, validates it,
        and calls the deviceService.Delete method to perform the deletion.
        Returns a 422 Unprocessable Entity status with an error message if the ID is invalid
        or if the deletion fails. Returns a 200 OK status with an empty response on success.
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Device removed
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Delete a device
      tags:
      - Device
    get:
      description: |-
        FindOne handles HTTP GET requests to retrieve a single device by ID.
        It parses the ID from the URL parameters, calls the device service to fetch the device,
        and returns the device data in JSON format.
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "404":
          description: Not Found
          schema: {}
      summary: Get a device by ID
      tags:
      - Device
    put:
      consumes:
      - application/json
      description: |-
        Update handles HTTP PUT requests to update an existing device by its ID.
        It parses the device ID from the URL parameters, validates the request body,
        and updates the device using the provided data. Returns the updated device
        on success, or an appropriate error response if validation fails, the ID is
        invalid, or the device is not found.
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: integer
      - description: Device Data
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/httpserver.UpdateDeviceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "404":
          description: Not Found
          schema: {}
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Update a device
      tags:
      - Device
  /device/fleet/{fleetId}:
    get:
      description: |-
        FindByFleet handles HTTP requests to retrieve devices associated with a specific fleet.
        t expects a fleet ID parameter in the URL path, converts it to int64, and uses the device service
        to fetch the corresponding devices.
      parameters:
      - description: Fleet ID
        in: path
        name: fleetId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Device'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: List devices by fleet
      tags:
      - Device
  /device/imei/{imei}:
    get:
      description: |-
        FindByIMEI handles HTTP GET requests to find a device by its IMEI.
        It extracts the IMEI from the URL parameters, queries the device service,
        and returns the device information in JSON format.
      parameters:
      - description: Device IMEI
        in: path
        name: imei
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "404":
          description: Not Found
          schema: {}
      summary: Get a device by IMEI
      tags:
      - Device
  /device/ulid/{ulid}:
    get:
      description: |-
        FindByULID handles HTTP GET requests to retrieve a single device by ULID.
        It extracts the ULID from the URL parameters, calls the device service to fetch the device,
        and returns the device data in JSON format.
      parameters:
      - description: Device ULID
        in: path
        name: ulid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Device'
        "404":
          description: Not Found
          schema: {}
      summary: Get a device by ULID
      tags:
      - Device
  /devices:
    get:
      description: |-
        FindAll handles HTTP requests to retrieve device records with optional filtering and pagination.
        It supports filtering by ULID or IMEI (mutually exclusive) and pagination parameters.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.PaginatedDevices'
        "500":
          description: Internal Server Error
          schema: {}
      summary: List devices with pagination
      tags:
      - Device
  /driver:
    post:
      consumes:
      - application/json
      description: |-
        Create handles the HTTP request to create a new driver.
        It parses the request body into a CreateDriverDTO, validates the input,
        and calls the driver service to create the driver. On success, it returns
        the created driver with HTTP 201 status. On error, it returns an appropriate
        HTTP error status and message.
      parameters:
      - description: Driver Data
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/httpserver.CreateDriverDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Driver'
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Create a new driver
      tags:
      - Driver
  /driver/{id}:
    delete:
      description: |-
        Delete handles HTTP DELETE requests to remove a driver resource by its ID.
        It parses the "id" parameter from the request URL, validates it, and calls the driverService.Delete method.
        If the ID is invalid or the deletion fails, it returns a 422 Unprocessable Entity status with an error message.
        On successful deletion, it returns a 200 OK status with an empty response body.
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Driver removed
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Delete a driver
      tags:
      - Driver
    get:
      description: |-
        FindOne handles HTTP requests to retrieve a single driver by its ID.
        It parses the "id" parameter from the request URL, validates it, and calls the driverService to fetch the driver.
        If the ID is invalid, it returns a 422 Unprocessable Entity response.
        If the driver is not found, it returns a 404 Not Found response.
        On success, it returns the driver data with a 200 OK response.
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Driver'
        "404":
          description: Not Found
          schema: {}
      summary: Get a driver by ID
      tags:
      - Driver
    put:
      consumes:
      - application/json
      description: |-
        Update handles the HTTP PUT request to update an existing driver entity.
        It parses the driver ID from the URL parameters, validates the request body,
        and updates the driver using the provided service. Returns appropriate HTTP
        status codes and error messages for invalid input, validation errors, or if
        the driver is not found.
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: integer
      - description: Driver Data
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/httpserver.UpdateDriverDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Driver'
        "404":
          description: Not Found
          schema: {}
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Update a driver
      tags:
      - Driver
  /driver/{id}/team:
    post:
      consumes:
      - application/json
      description: |-
        AssignToTeam handles the HTTP request to assign a driver to a team.
        It expects the driver ID as a URL parameter and the team assignment data in the request body.
        The method validates the driver ID, parses and validates the request body, and delegates the assignment
        operation to the driver service. Returns appropriate HTTP status codes and messages based on the outcome.
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: integer
      - description: Team Data
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/httpserver.AssignToTeamDTO'
      responses:
        "200":
          description: Driver assigned to team
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Assign driver to team
      tags:
      - Driver
  /driver/{id}/team/{teamId}:
    delete:
      description: |-
        RemoveFromTeam handles the HTTP request to remove a driver from a team.
        It expects the driver ID and team ID as URL parameters ("id" and "teamId").
        The method parses these parameters, validates them, and calls the driverService to perform the removal.
        Returns a 200 OK status with a success message if the operation is successful.
        Returns a 422 Unprocessable Entity status with an error message if the IDs are invalid or if the removal fails.
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: integer
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      responses:
        "200":
          description: Driver removed from team
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Remove driver from team
      tags:
      - Driver
  /drivers:
    get:
      description: |-
        FindAll handles HTTP GET requests to retrieve driver records with optional filtering and pagination.
        It supports filtering by either "ulid" or "teamId" query parameters, but not both simultaneously.
        If both filters are provided, it returns a 400 Bad Request error.
        Pagination is controlled via "page" and "page_size" query parameters, with defaults and limits applied.
        Returns a JSON response containing the paginated drivers or an error message.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.PaginatedDrivers'
        "500":
          description: Internal Server Error
          schema: {}
      summary: List drivers with pagination
      tags:
      - Driver
  /fleet:
    get:
      description: FindAll handles HTTP GET requests to retrieve a list of fleets
        with optional pagination and filtering by ULID.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Fleet ULID to filter
        in: query
        name: ulid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.PaginatedFleets'
        "500":
          description: Internal Server Error
          schema: {}
      summary: List fleets with pagination
      tags:
      - Fleet
    post:
      consumes:
      - application/json
      description: |-
        Create handles the HTTP request to create a new fleet.
        It parses the request body into a CreateFleetDTO, validates the input,
        and calls the fleetService to create the fleet. If successful, it returns
        the created fleet with HTTP 201 status. On error, it returns an appropriate
        HTTP status and error message.
      parameters:
      - description: Fleet Data
        in: body
        name: fleet
        required: true
        schema:
          $ref: '#/definitions/httpserver.CreateFleetDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Fleet'
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Create a new fleet
      tags:
      - Fleet
  /fleet/{id}:
    delete:
      description: |-
        Delete handles HTTP DELETE requests to remove a fleet resource by its ID.
        It parses the "id" parameter from the request URL, validates it, and calls the fleetService.Delete method.
        If the ID is invalid, it responds with HTTP 422 Unprocessable Entity and an error message.
        If the deletion fails, it also responds with HTTP 422 and the error message from the service.
        On successful deletion, it responds with HTTP 200 OK and an empty body.
      parameters:
      - description: Fleet ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Fleet removed
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Delete a fleet
      tags:
      - Fleet
    get:
      description: |-
        FindOne handles HTTP GET requests to retrieve a single fleet entity by its ID.
        It parses the "id" parameter from the URL, validates it, and calls the fleetService to fetch the corresponding fleet.
        If the ID is invalid, it responds with a 422 Unprocessable Entity status and an error message.
        If the fleet is not found, it responds with a 404 Not Found status and the error message from the service.
        On success, it returns the fleet entity with a 200 OK status.
      parameters:
      - description: Fleet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Fleet'
        "404":
          description: Not Found
          schema: {}
      summary: Get a fleet by ID
      tags:
      - Fleet
    put:
      consumes:
      - application/json
      description: |-
        Update handles HTTP PUT requests to update an existing fleet entity.
        It parses the fleet ID from the URL parameters, validates the request body,
        and updates the fleet using the provided service. Returns appropriate HTTP
        status codes and error messages for invalid input, validation errors, or if
        the fleet is not found.
      parameters:
      - description: Fleet ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fleet Data
        in: body
        name: fleet
        required: true
        schema:
          $ref: '#/definitions/httpserver.UpdateFleetDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Fleet'
        "404":
          description: Not Found
          schema: {}
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Update a fleet
      tags:
      - Fleet
  /fleet/team/{teamId}:
    get:
      description: |-
        FindByTeam handles HTTP requests to retrieve fleets associated with a specific team.
        It expects a "teamId" parameter in the URL, parses it as an int64, and uses the fleetService
        to fetch the fleets for the given team. Returns a JSON response with the fleets on success,
        or an error message with the appropriate HTTP status code if the team ID is invalid or
        if an internal error occurs.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Fleet'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: List fleets by team
      tags:
      - Fleet
  /team:
    get:
      description: |-
        FindAll handles HTTP GET requests to retrieve teams with optional filtering and pagination.
        It supports filtering by either "ulid" or "accountId" query parameters, but not both simultaneously.
        If both filters are provided, it returns a 400 Bad Request error.
        Pagination is controlled via "page" and "page_size" query parameters, with defaults of 1 and 10, respectively.
        The maximum allowed page size is 100.
        Depending on the filter, it delegates to the appropriate teamService method:

        - FindByULID if "ulid" is provided

        - FindByAccount if "accountId" is provided (expects a valid int64)

        - FindAll for paginated results if no filter is provided

        Returns a JSON response with the paginated teams or an error message with the appropriate HTTP status code.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.PaginatedTeams'
        "500":
          description: Internal Server Error
          schema: {}
      summary: List teams with pagination
      tags:
      - Team
    post:
      consumes:
      - application/json
      description: |-
        Create handles the HTTP request to create a new team.
        It parses the request body into a CreateTeamDTO, validates the input,
        and delegates the creation logic to the teamService. If successful,
        it returns the created team with HTTP 201 status. On error, it responds
        with HTTP 422 and an error message.
      parameters:
      - description: Team Data
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/httpserver.CreateTeamDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Team'
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Create a new team
      tags:
      - Team
  /team/{id}:
    delete:
      description: |-
        Delete handles HTTP DELETE requests to remove a team by its ID.
        It parses the "id" parameter from the request URL, validates it, and calls the teamService.Delete method.
        If the ID is invalid, it returns a 422 Unprocessable Entity with an error message.
        If the deletion fails, it also returns a 422 status with the error message.
        On successful deletion, it returns a 200 OK status with an empty response body.
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Team removed
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Delete a team
      tags:
      - Team
    get:
      description: |-
        FindOne handles HTTP GET requests to retrieve a team by its ID.
        It parses the "id" parameter from the request URL, validates it, and calls the teamService to fetch the team.
        If the ID is invalid, it responds with a 422 Unprocessable Entity status and an error message.
        If the team is not found, it responds with a 404 Not Found status and an error message.
        On success, it returns the team data with a 200 OK status.
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Team'
        "404":
          description: Not Found
          schema: {}
      summary: Get a team by ID
      tags:
      - Team
    put:
      consumes:
      - application/json
      description: |-
        Update handles the HTTP PUT request to update an existing team.
        It parses the team ID from the URL parameters, validates the request body,
        and updates the team using the provided service. Returns the updated team
        as JSON on success, or an appropriate error message and status code on failure.
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      - description: Team Data
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/httpserver.UpdateTeamDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Team'
        "404":
          description: Not Found
          schema: {}
        "422":
          description: Unprocessable Entity
          schema: {}
      summary: Update a team
      tags:
      - Team
  /team/account/{accountId}:
    get:
      description: |-
        FindByAccount handles HTTP requests to retrieve teams associated with a specific account.
        It expects an "accountId" parameter in the URL path, parses it as an int64, and uses the teamService
        to fetch the corresponding teams. If the account ID is invalid, it returns a 422 Unprocessable Entity error.
        On service errors, it returns a 500 Internal Server Error. On success, it responds with the list of teams
        and a 200 OK status.
      parameters:
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Team'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: List teams by account
      tags:
      - Team
swagger: "2.0"
